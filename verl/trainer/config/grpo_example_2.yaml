# Original content fetched from video/grpo_example.yaml
data:
  # (pulled from your original)
  train_files: hiyouga/math12k@train
  val_files:   hiyouga/math12k@test
  prompt_key:  problem
  answer_key:  answer
  image_key:   images
  # new PPO fields
  tokenizer: null
  video_key: null
  train_batch_size: 512                # was rollout_batch_size
  val_batch_size: null
  return_raw_input_ids: false
  return_raw_chat:       false
  shuffle:               true
  filter_overlong_prompts: false
  filter_overlong_prompts_workers: 1
  truncation:           error
  max_prompt_length:    2048
  max_response_length:  2048
  system_prompt: >
     You FIRST perform temporal video grounding based on the user query. Think about the reasoning process as an internal monologue enclosed within <think> </think> tags.
    Then, provide the final absolute start and end times in seconds within <answer> </answer> tags. Inside the <answer> tags, output ONLY a valid JSON **list** containing one or more candidate time range objects. Each object must have exactly two keys: "start_time" and "end_time". The values for these keys must be strings representing floating-point numbers (e.g., "10.5", "0.0", "123.45"). Do NOT use MM:SS format.

    The final output MUST strictly follow this structure: <think>...</think><answer>[{"start_time": "...", "end_time": "..."}, ...]</answer>

    Example:
    Input: <video> Give the query: 'a person is putting a book on a shelf.', when does the described content occur in the video?
    Expected Output Structure: <think>The user wants the time for 'putting a book on a shelf'. This might happen briefly around 5s and more clearly around 8-12 seconds.</think><answer>[{"start_time": "5.1", "end_time": "5.8"}, {"start_time": "8.3", "end_time": "11.9"}]</answer>

    Now, process the following request:
  custom_cls:
    path: null
    name: null

actor_rollout_ref:
  hybrid_engine: true
  model:
    path: Qwen/Qwen2.5-VL-3B-Instruct   # ← necessary entry
    external_lib: null
    override_config: {}
    enable_gradient_checkpointing: true
    use_remove_padding: True
    use_liger: false
  actor:
    strategy: fsdp
    ppo_mini_batch_size:           256
    ppo_micro_batch_size: null # will be deprecated, use ppo_micro_batch_size_per_gpu
    ppo_micro_batch_size_per_gpu:  16
    use_dynamic_bsz:               false
    ppo_max_token_len_per_gpu:     16384
    grad_clip:                     1.0
    clip_ratio:                    0.2
    clip_ratio_low:                0.2
    clip_ratio_high:               0.2
    clip_ratio_c:                  3.0
    loss_agg_mode:                 token-mean
    entropy_coeff:                 1.0e-3
    use_kl_loss:                   true
    kl_loss_coef:                  1.0e-2
    kl_loss_type:                  low_var_kl
    ppo_epochs:                    1
    shuffle:                       false
    ulysses_sequence_parallel_size: 1
    checkpoint:
      contents: ['model', 'optimizer', 'extra'] 
    optim:
      lr:               1.0e-6
      weight_decay:     1.0e-2
      lr_warmup_steps:  -1
      lr_warmup_steps_ratio: 0.0
    fsdp_config:
      param_offload:    false
      optimizer_offload: false
      wrap_policy:
        min_num_params: 0
      fsdp_size:       -1
  # --- Start of moved rollout section ---
  ref:
    strategy: fsdp
    fsdp_config:
      param_offload: False
      wrap_policy:
        # transformer_layer_cls_to_wrap: None
        min_num_params: 0
    log_prob_micro_batch_size: null # will be deprecated, use log_prob_micro_batch_size_per_gpu
    log_prob_micro_batch_size_per_gpu: 2
    log_prob_use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
    log_prob_max_token_len_per_gpu: ${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}
    ulysses_sequence_parallel_size: ${actor_rollout_ref.actor.ulysses_sequence_parallel_size} # sp size
  rollout:
    name: vllm
    temperature: 1.0
    top_k: -1 # 0 for hf rollout, -1 for vllm rollout
    top_p: 1
    use_fire_sampling: False # https://arxiv.org/abs/2410.21236
    prompt_length: ${data.max_prompt_length}  # not use for opensource
    response_length: ${data.max_response_length}
    # for vllm rollout
    dtype: bfloat16 # should align with FSDP
    gpu_memory_utilization: 0.5
    ignore_eos: False
    enforce_eager: False
    free_cache_engine: False
    load_format: dummy_dtensor
    tensor_model_parallel_size: 2
    max_num_batched_tokens: 8192
    max_model_len: null
    max_num_seqs: 1024
    log_prob_micro_batch_size: null # will be deprecated, use log_prob_micro_batch_size_per_gpu
    log_prob_micro_batch_size_per_gpu: 2
    log_prob_use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
    log_prob_max_token_len_per_gpu: ${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}
    disable_log_stats: True
    enable_chunked_prefill: True # may get higher throughput when set to True. When activated, Please increase max_num_batched_tokens or decrease max_model_len.
    # for hf rollout
    do_sample: True
    # number of responses (i.e. num sample times)
    n: 1 # > 1 for grpo
    engine_kwargs: # inference engine parameters
      swap_space: null # null means "use the engine default value" (usually 4 GB), setting it to, e.g., 32 means 32 GB
    val_kwargs:
      # sampling parameters for validation
      top_k: -1 # 0 for hf rollout, -1 for vllm rollout
      top_p: 1.0
      temperature: 0
      n: 1
      do_sample: False # default eager for validation

critic:
  rollout_n: ${actor_rollout_ref.rollout.n}
  strategy: fsdp
  optim:
    lr: 1e-5
    lr_warmup_steps_ratio: 0.  # the total steps will be injected during runtime
    min_lr_ratio: null   # only useful for warmup with cosine
    warmup_style: constant  # select from constant/cosine
    total_training_steps: -1  # must be override by program
    weight_decay: 0.01
  model:
    path: Qwen/Qwen2.5-VL-3B-Instruct
    tokenizer_path: ${actor_rollout_ref.model.path}
    override_config: { }
    external_lib: ${actor_rollout_ref.model.external_lib}
    enable_gradient_checkpointing: True
    use_remove_padding: False
    fsdp_config:
      param_offload: False
      optimizer_offload: False
      wrap_policy:
        # transformer_layer_cls_to_wrap: None
        min_num_params: 0
      fsdp_size: -1
  ppo_mini_batch_size: ${actor_rollout_ref.actor.ppo_mini_batch_size}
  ppo_micro_batch_size: null # will be deprecated, use ppo_micro_batch_size_per_gpu
  ppo_micro_batch_size_per_gpu: 2
  forward_micro_batch_size: ${critic.ppo_micro_batch_size}
  forward_micro_batch_size_per_gpu: ${critic.ppo_micro_batch_size_per_gpu}
  use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
  ppo_max_token_len_per_gpu: 32768 # (${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}) * 2
  forward_max_token_len_per_gpu: ${critic.ppo_max_token_len_per_gpu}
  ulysses_sequence_parallel_size: 1 # sp size
  ppo_epochs: ${actor_rollout_ref.actor.ppo_epochs}
  shuffle: ${actor_rollout_ref.actor.shuffle}
  grad_clip: 1.0
  cliprange_value: 0.5
  checkpoint:
    contents: ['model', 'optimizer', 'extra']  # with 'hf_model' you can save whole model as hf format, now only use sharded model checkpoint to save space


reward_model:
  enable: false
  strategy: fsdp
  model:
    input_tokenizer:            ${actor_rollout_ref.model.path}
    path:                       ~/models/FsfairX-LLaMA3-RM-v0.1
    external_lib:               ${actor_rollout_ref.model.external_lib}
    use_remove_padding:         false
    fsdp_config:
      wrap_policy:
        min_num_params: 0
      param_offload: false
      fsdp_size:     -1
  micro_batch_size:           null
  micro_batch_size_per_gpu:   2
  max_length:                 null
  ulysses_sequence_parallel_size: 1
  use_dynamic_bsz:            ${critic.use_dynamic_bsz}
  # MODIFIED: Adjusted reference to critic's own config (assuming this was intended)
  forward_max_token_len_per_gpu: ${critic.ppo_micro_batch_size_per_gpu} # Original reference was self-referential, adjusted

  reward_manager:             naive

custom_reward_function:
  path: null
  name: compute_score

algorithm:
  gamma: 1.0
  lam:   1.0
  adv_estimator: grpo
  use_kl_in_reward: false
  kl_penalty: kl
  kl_ctrl:
    type:      fixed
    kl_coef:   0.001
    horizon:   10000
    target_kl: 0.1

trainer:
  balance_batch:                true
  total_epochs:                 10
  total_training_steps:         null
  project_name:                 verl_examples
  experiment_name:              gsm8k
  logger:
    - console
    - wandb
  log_val_generations:          0
  nnodes:                       1
  n_gpus_per_node:              8
  save_freq:                    10
  resume_mode:                  auto
  resume_from_path:             null
  val_before_train:             true
  test_freq:                    10
  critic_warmup:                0
  default_hdfs_dir:             null
  del_local_ckpt_after_load:    false
  default_local_dir:            /home/chendong/video-rl/verl-video/checkpoints/${trainer.project_name}/${trainer.experiment_name}
  max_actor_ckpt_to_keep:       null
  max_critic_ckpt_to_keep:      null
  ray_wait_register_center_timeout: 300